{
    "collab_server" : "",
    "contents" : "\n#' Clean data\n#'\n#' This is a simple function that clean the data\n#'\n#' @param data A data frame with raw data\n#'\n#' @return This function returns a dataframe with the information from the file after being cleaned.\n#'\n#' @importFrom tidyr unite\n#' @importFrom dplyr %>% tbl_df select mutate\n#' @importFrom lubridate ymd_h\n#'\n#' @examples\n#' \\dontrun{\n#' data <- readr::read_delim(\"signif.tsv.gz\", delim = \"\\t\")\n#' eq_clean_data(data)\n#' }\n#'\n#' @export\neq_clean_data<-function(data){\n  data %>%\n    dplyr::select(COUNTRY,LOCATION_NAME, LATITUDE, LONGITUDE,YEAR, MONTH, DAY, HOUR, EQ_MAG_ML,DEATHS) %>%\n    dplyr::mutate(LATITUDE= as.numeric(LATITUDE)) %>%\n    dplyr::mutate(LONGITUDE= as.numeric(LONGITUDE))%>%\n    tidyr::unite(Date, YEAR, MONTH, DAY, HOUR) %>%\n    dplyr::mutate(Date = lubridate::ymd_h(Date))%>%\n    dplyr::mutate(DEATHS=as.numeric(DEATHS)) %>%\n    eq_location_clean()\n}\n\n#' Clean location\n#'\n#' This is a simple function that clean the column location in a dataframe\n#'\n#' @param data A data frame with raw data\n#'\n#' @return This function returns a dataframe with a cleaned LOCATION_NAME column\n#'\n#' @importFrom dplyr %>% mutate funs\n#' @importFrom stringi stri_trans_totitle\n#' @importFrom stringr str_trim\n#'\n#' @examples\n#' \\dontrun{\n#' eq_location_clean(data)\n#' }\n#'\n#' @export\neq_location_clean<-function(data){\n  data%>%\n    dplyr::mutate_each(dplyr::funs(gsub(\".*: \", \"\", LOCATION_NAME)),LOCATION_NAME)%>%\n    dplyr::mutate(LOCATION_NAME=stringi::stri_trans_totitle(LOCATION_NAME)) %>%\n    dplyr::mutate(LOCATION_NAME=stringr::str_trim(LOCATION_NAME))\n}\n\n#' Time line of earthquakes\n#'\n#' @description This geom for ggplot2 called geom_timeline() for plotting a time line\n#'  of earthquakes ranging from xmin to xmaxdates with a point for each earthquake.\n#'  Optional aesthetics include color, size, and alpha (for transparency)\n#'\n#' @importFrom ggplot2 layer\n#'\n#' @examples\n#' \\dontrun{\n#' data %>% eq_clean_data() %>%\n#' dplyr::filter(Date >= \"1980-01-01\" & Date <=\"2014-01-01\" & COUNTRY == c(\"ITALY\",\"USA\", \"JORDAN\")) %>%\n#'   ggplot(aes(x = Date,\n#'              y = COUNTRY,\n#'              color = DEATHS,\n#'              size = EQ_MAG_ML\n#'   )) +\n#'   geom_timeline() +\n#'   theme_timeline()\n#'\n#' }\n#'\n#' @export\ngeom_timeline <- function(mapping = NULL, data = NULL, stat = \"identity\",\n                          position = \"identity\", na.rm = FALSE,\n                          show.legend = NA, inherit.aes = TRUE, ...) {\n\n  ggplot2::layer(\n    geom = GeomTimeline, mapping = mapping,\n    data = data, stat = stat, position = position,\n    show.legend = show.legend, inherit.aes = inherit.aes,\n    params = list(na.rm = na.rm, ...)\n  )\n}\n\n#' @importFrom ggplot2 ggproto Geom aes draw_key_point\n#' @importFrom grid pointsGrob gList gpar\n#' @importFrom scales alpha\nGeomTimeline <-\n  ggplot2::ggproto(\n    \"GeomTimeline\", ggplot2::Geom,\n    required_aes = c(\"x\"),\n    default_aes = ggplot2::aes(colour = \"grey\", size = 1.5, alpha = 0.5,\n                               shape = 21, fill = \"grey\", stroke = 0.5),\n    draw_key = ggplot2::draw_key_point,\n    draw_panel = function(data, panel_scales, coord) {\n\n      if (!(\"y\" %in% colnames(data))) {\n        data$y <- 0.15\n      }\n\n      coords <- coord$transform(data, panel_scales)\n\n      points <- grid::pointsGrob(\n        coords$x, coords$y,\n        pch = coords$shape, size = unit(coords$size / 4, \"char\"),\n        gp = grid::gpar(\n          col = scales::alpha(coords$colour, coords$alpha),\n          fill = scales::alpha(coords$colour, coords$alpha)\n        )\n      )\n      y_lines <- unique(coords$y)\n\n      lines <- grid::polylineGrob(\n        x = unit(rep(c(0, 1), each = length(y_lines)), \"npc\"),\n        y = unit(c(y_lines, y_lines), \"npc\"),\n        id = rep(seq_along(y_lines), 2),\n        gp = grid::gpar(col = \"grey\",\n                        lwd = .pt)\n      )\n\n      grid::gList(points, lines)\n    }\n  )\n\n#' Time line labels of earthquakes\n#'\n#' @description This geom for adding annotations to the earthquake data. This geom adds a vertical line\n#'  to each data point with a text annotation (e.g. the location of the earthquake) attached to each line\n#'\n#' @param n_max An integer. number of earthquakes, where we take the n_max largest (by magnitude) earthquakes\n#'\n#' @importFrom ggplot2 layer\n#'\n#' @examples\n#' \\dontrun{\n#' data %>% eq_clean_data() %>%\n#' dplyr::filter(Date >= \"1980-01-01\" & Date <=\"2014-01-01\" & COUNTRY == c(\"ITALY\",\"USA\", \"JORDAN\")) %>%\n#'   ggplot(aes(x = Date,\n#'              y = COUNTRY,\n#'              color = DEATHS,\n#'              size = EQ_MAG_ML\n#'   )) +\n#'   geom_timeline() +\n#'   geom_timeline_label(aes(label = LOCATION_NAME), n_max = 5) +\n#'   theme_timeline()\n#'\n#' }\n#'\n#' @export\ngeom_timeline_label <- function(mapping = NULL, data = NULL, stat = \"identity\",\n                                position = \"identity\", ..., na.rm = FALSE,\n                                n_max = NULL, show.legend = NA,\n                                inherit.aes = TRUE) {\n\n  ggplot2::layer(\n    geom = GeomTimelineLabel, mapping = mapping,\n    data = data, stat = stat, position = position,\n    show.legend = show.legend, inherit.aes = inherit.aes,\n    params = list(na.rm = na.rm, n_max = n_max, ...)\n  )\n}\n\n#' @importFrom ggplot2 ggproto Geom aes draw_key_point\n#' @importFrom grid polylineGrob gList gpar textGrob\n#' @importFrom dplyr %>% group_by_ top_n ungroup\nGeomTimelineLabel <-\n  ggplot2::ggproto(\n    \"GeomTimelineLabel\", ggplot2::Geom,\n    required_aes = c(\"x\", \"label\"),\n    draw_key = ggplot2::draw_key_blank,\n    setup_data = function(data, params) {\n      if (!is.null(params$n_max)) {\n        if (!(\"size\" %in% colnames(data))) {\n          stop(paste(\"'size' aesthetics needs to be\",\n                     \"provided when 'n_max' is defined.\"))\n        }\n        data <- data %>%\n          dplyr::group_by_(\"group\") %>%\n          dplyr::top_n(params$n_max, size) %>%\n          dplyr::ungroup()\n      }\n      data\n    },\n    draw_panel = function(data, panel_scales, coord, n_max) {\n\n      if (!(\"y\" %in% colnames(data))) {\n        data$y <- 0.15\n      }\n\n      coords <- coord$transform(data, panel_scales)\n      n_grp <- length(unique(data$group))\n      offset <- 0.2 / n_grp\n\n      lines <- grid::polylineGrob(\n        x = unit(c(coords$x, coords$x), \"npc\"),\n        y = unit(c(coords$y, coords$y + offset), \"npc\"),\n        id = rep(1:dim(coords)[1], 2),\n        gp = grid::gpar(\n          col = \"grey\"\n        )\n      )\n\n      names <- grid::textGrob(\n        label = coords$label,\n        x = unit(coords$x, \"npc\"),\n        y = unit(coords$y + offset, \"npc\"),\n        just = c(\"left\", \"bottom\"),\n        rot = 45\n      )\n\n      grid::gList(lines, names)\n    }\n  )\n\n#' Theme for a correct visualization\n#'\n#' @description This is a theme to configure the look of the geom\n#'\n#' @importFrom ggplot2 theme element_blank element_line\n#'\n#' @examples\n#' \\dontrun{\n#' data %>% eq_clean_data() %>%\n#' dplyr::filter(Date >= \"1980-01-01\" & Date <=\"2014-01-01\" & COUNTRY == c(\"ITALY\",\"USA\", \"JORDAN\")) %>%\n#'   ggplot(aes(x = Date,\n#'              y = COUNTRY,\n#'              color = DEATHS,\n#'              size = EQ_MAG_ML\n#'   )) +\n#'   geom_timeline() +\n#'   theme_timeline()\n#'\n#' }\n#'\n#' @export\ntheme_timeline <- function() {\n  ggplot2::theme(\n    plot.background = ggplot2::element_blank(),\n    panel.background = ggplot2::element_blank(),\n    legend.key = ggplot2::element_blank(),\n    axis.title.y = ggplot2::element_blank(),\n    axis.line.x = ggplot2::element_line(size = 1),\n    axis.ticks.y = ggplot2::element_blank(),\n    legend.position = \"bottom\"\n  )\n}\n\n\n#' Map of earthquakes\n#'\n#' @description The function maps the epicenters (LATITUDE/LONGITUDE) and annotates\n#'  each point with in pop up window containing annotation data stored\n#'  in a column of the data frame\n#'\n#' @importFrom leaflet leaflet addTiles addCircleMarkers\n#' @importFrom dplyr %>%\n#'\n#' @param data A data frame with the earthquake data\n#' @param annot_col A string with the name of the column to show in the pop up\n#'\n#' @return A Map with earthquakes and annotations.\n#'\n#' @examples\n#' \\dontrun{\n#' eq_map(data, annot_col = \"Date\")\n#' }\n#' @export\neq_map <- function(data, annot_col) {\n\n  map <- leaflet::leaflet() %>%\n    leaflet::addTiles() %>%\n    leaflet::addCircleMarkers(lng = data$LONGITUDE, lat = data$LATITUDE,\n                              radius = data$EQ_MAG_ML, weight = 1,\n                              popup = data[[annot_col]])\n\n  map\n}\n\n\n#' Creates a label for leaflet map\n#'\n#' @description This function takes the dataset as an argument and\n#'  creates an HTML label that can be used as the annotation text in the leaflet map\n#'\n#' @param data A data frame with the earthquake data\n#'\n#' @return A vector with labels\n#'\n#' @export\n#'\n#' @examples\n#' \\dontrun{\n#' eq_create_label(data)\n#' }\neq_create_label <- function(data) {\n  popup_text <- with(data, {\n    part1 <- ifelse(is.na(LOCATION_NAME), \"\",\n                    paste(\"<strong>Location:</strong>\",\n                          LOCATION_NAME))\n    part2 <- ifelse(is.na(EQ_MAG_ML), \"\",\n                    paste(\"<br><strong>Magnitude</strong>\",\n                          EQ_MAG_ML))\n    part3 <- ifelse(is.na(DEATHS), \"\",\n                    paste(\"<br><strong>Total deaths:</strong>\",\n                          DEATHS))\n    paste0(part1, part2, part3)\n  })\n}\n",
    "created" : 1535483866094.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "4145409589",
    "id" : "1BC0794B",
    "lastKnownWriteTime" : 1535557708,
    "last_content_update" : 1535557708862,
    "path" : "C:/Users/ezferda/Desktop/InitialTraining/Curso_msdr/Curso5_Capstone/CapstonePackage/R/main.R",
    "project_path" : "R/main.R",
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}